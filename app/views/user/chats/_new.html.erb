<div class="chat_new_component">
<%= form_with model:  chat, url:user_chats_path, id:"form", method:"POST" do |f| %>
      
    <div class="field_area">
      <div class="input_field_area">
      <%= f.text_field :user_name, placeholder:"ユーザー名", maximum: Host.new.max_name_length, value:session[:user_name], class:"user_name input_field" %></br></br>
      <% if  defined? select_method %>
        <div class="ai_method_area">
        <%= f.check_box :generate_chat_box, checked:true, class:"chat_checkbox checkbox" %><%= f.label :generate_chat, class:"check_label" %>
        <%= f.check_box :generate_image_box, class:"image_checkbox checkbox" %><%= f.label :generate_image, class:"check_label" %>
        </div>
      <% end %>
      <%= f.hidden_field :ai_method_id,value:AiMethod.find_by(name:"generate_chat").id, id:"ai_method_field" %>
      <%if chat.prequel_chat_id.present? %>
      <%= f.text_area :question, placeholder:"続きの質問", required: true, maximum: chat.max_characters, autocomplete: "new-password", class:"input_field text_area", value:"", required: true%>
      <%else%>
      <%= f.text_area :question, placeholder:"質問", required: true, maximum: chat.max_characters, autocomplete: "new-password", class:"input_field text_area",value:"" ,required: true%>
      <%end%>

      <!--送信ボタン -->
      <%= f.submit "　　", class:"submit", id:"submit" %>
      <svg class="submit_icon"stroke="currentColor" fill="none" stroke-width="2" viewBox="0 0 24 24" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4 mr-1" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg">
        <line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2">
        </polygon>
      </svg>

      </div>
    </div>
    <%=f.hidden_field :prequel_chat_id, value: chat.prequel_chat_id %>
<% end %>
</div>
<script>
window.addEventListener("DOMContentLoaded", () => {
  // textareaタグを全て取得
  const textareaEls = document.querySelectorAll("textarea");

  textareaEls.forEach((textareaEl) => {
    // デフォルト値としてスタイル属性を付与
    textareaEl.setAttribute("style", `height: ${textareaEl.scrollHeight}px;`);
    // inputイベントが発生するたびに関数呼び出し
    textareaEl.addEventListener("input", setTextareaHeight);
  });

  // textareaの高さを計算して指定する関数
  function setTextareaHeight() {
    this.style.height = "auto";
    this.style.height = `${this.scrollHeight}px`;
  }
});
$(document).ready(function() {
    $('.chat_checkbox').change(function() {
        if ($(this).prop("checked")) {
          $('.image_checkbox').prop("checked",false)
          //$(".form").attr('action',"<%=user_chats_path%>")
        }else{
          $('.image_checkbox').prop("checked",true)
        }
        check_action()
    });
    $('.image_checkbox').change(function() {
        if ($(this).prop("checked")) {
          $('.chat_checkbox').prop("checked",false)
          //$(".form").attr('action',"<%=user_chats_path%>")
        }else{
          $('.chat_checkbox').prop("checked",true)
        }
        check_action()
    });
});

function check_action(){
  if ($('.chat_checkbox').prop("checked")) {
    $('.text_area').attr("placeholder" , "質問")
    $('#ai_method_field').val("<%=AiMethod.find_by(name:'generate_chat').id%>")
    //$(".form").attr('action',"<%=user_chats_path%>")
  }else{
    $('.text_area').attr("placeholder" , "画像内容")
    $('#ai_method_field').val("<%=AiMethod.find_by(name:'generate_image').id%>")
  }
  if ($('.image_checkbox').prop("checked")) {
    $('.text_area').attr("placeholder" , "画像内容")
    $('#ai_method_field').val("<%=AiMethod.find_by(name:'generate_image').id%>")
    //$(".form").attr('action',"<%=user_chats_path%>")
  }else{
    $('.text_area').attr("placeholder" , "質問")
    $('#ai_method_field').val("<%=AiMethod.find_by(name:'generate_chat').id%>")
  }
  console.log("演算")
  console.log(false*false)
  console.log(false*true)
  console.log(true*true)
  console.log( $('#ai_method_field').val())
}
check_action()
</script>